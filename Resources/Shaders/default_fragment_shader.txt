#version 330 core

in vec2 texture_pos;
in vec3 frag_normal;
in vec3 frag_position;

out vec4 FragColor;

uniform vec3 camera_position;
uniform vec3 light_position;
uniform vec3 light_color;

uniform vec3 ambient_color;
uniform float ambient_factor;
uniform vec3 diffuse_color;
uniform float diffuse_factor;
uniform vec3 specular_color;
uniform float specular_factor;
uniform float shininess;

uniform float alpha_channel;

void main()
{
    // Ambient
    vec3 ambient = ambient_color * ambient_factor * light_color;

    // Diffuse
    vec3 normal = normalize(frag_normal);
    vec3 light_direction = normalize(light_position - frag_position);
    vec3 diffuse = diffuse_color * diffuse_factor * light_color * max(dot(normal, light_direction), 0.0);

    // Specular
    vec3 view_direction = normalize(camera_position - frag_position);
    vec3 reflect_direction = reflect(-light_direction, normal);
    float specular_value = pow(max(dot(normal, light_direction), 0.0), shininess);
    vec3 specular = specular_color * specular_factor * specular_value * light_color;

    FragColor = vec4(ambient + diffuse + specular, alpha_channel);
}